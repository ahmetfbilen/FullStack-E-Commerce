using Microsoft.AspNetCore.Mvc;
using ECommerceApi.Data;
using ECommerceApi.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore; // Include ve ToListAsync iÃ§in
using System.Security.Claims; // ğŸ”¹ claims iÃ§in

namespace ECommerceApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]//TÃ¼m ProductsController endpoint'leri iÃ§in yetkilendirme gerektirir
    public class ProductsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public ProductsController(AppDbContext context)
        {
            _context = context;
        }

        // [AllowAnonymous] eklersen herkes tarafÄ±ndan eriÅŸilebilir olur
        [AllowAnonymous]
        [HttpGet]
        // ÃœrÃ¼nleri getirirken kategorilerini de dahil et ve Ã§Ä±ktÄ±yÄ± temizle
        public async Task<IActionResult> Get( // async Task<IActionResult> olmalÄ±
            [FromQuery] string? q,             // ğŸ”¹ arama metni (opsiyonel)
            [FromQuery] int? categoryId,       // ğŸ”¹ kategori filtresi (opsiyonel)
            [FromQuery] int? sellerId          // ğŸ”¹ satÄ±cÄ± filtresi (opsiyonel)
        )
        {
            // ğŸ”¹ Filtrelenebilir sorgu oluÅŸtur (Include + AsQueryable)
            var query = _context.Products
                .Include(p => p.Category)
                .AsQueryable();

            // ğŸ”¹ Arama filtresi (adÄ± veya istersen aÃ§Ä±klama)
            if (!string.IsNullOrWhiteSpace(q))
            {
                query = query.Where(p =>
                    p.Name.Contains(q)            // Ã¼rÃ¼n adÄ±
                /* || p.Description!.Contains(q) */ // aÃ§Ä±klama alanÄ±n varsa aÃ§
                );
            }

            // ğŸ”¹ Kategori filtresi
            if (categoryId.HasValue)
            {
                query = query.Where(p => p.CategoryId == categoryId.Value);
            }

            // ğŸ”¹ SatÄ±cÄ± filtresi (belirli bir kullanÄ±cÄ±nÄ±n ekledikleri)
            if (sellerId.HasValue)
            {
                query = query.Where(p => p.SellerId == sellerId.Value);
            }

            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ ToListAsync asenkron bir metottur.
            var products = await query.ToListAsync();

            // Anonim tip kullanarak Ã§Ä±ktÄ±yÄ± istediÄŸimiz gibi ÅŸekillendiriyoruz.
            // Category iÃ§indeki Products koleksiyonunu dahil etmiyoruz.
            var productResponses = products.Select(p => new // <-- BURADA ANONÄ°M TÄ°P KULLANIYORUZ
            {
                p.Id,
                p.Name,
                p.Price,
                p.Image,
                p.CategoryId,
                p.SellerId, // ğŸ”¹ frontende bilgi gitsin
                Category = p.Category != null ? new // Kategori varsa sadece ID ve Name'i al
                {
                    p.Category.Id,
                    p.Category.Name
                } : null // Kategori yoksa null
            }).ToList();

            return Ok(productResponses);
        }

        // ğŸ”¹ Sadece giriÅŸ yapan satÄ±cÄ±nÄ±n kendi Ã¼rÃ¼nleri
        [Authorize(Roles = "Admin,Seller")]
        [HttpGet("mine")]
        public async Task<IActionResult> GetMine()
        {
            var currentUserId = GetUserIdFromClaims(); // ğŸ”¹
            if (currentUserId == null) return Forbid();

            var products = await _context.Products
                .Include(p => p.Category)
                .Where(p => p.SellerId == currentUserId)
                .ToListAsync();

            var result = products.Select(p => new
            {
                p.Id,
                p.Name,
                p.Price,
                p.Image,
                p.CategoryId,
                p.SellerId,
                Category = p.Category != null ? new { p.Category.Id, p.Category.Name } : null
            });

            return Ok(result);
        }

        // HTTP POST isteÄŸiyle yeni Ã¼rÃ¼n eklemek iÃ§in bu metot kullanÄ±lÄ±r.
        // URL: POST /api/products
        //[Authorize(Roles = "Admin,Seller")] // EÄŸer rol tabanlÄ± yetkilendirme isterseniz bu satÄ±rÄ± aktif edin
        [HttpPost]
        public async Task<IActionResult> Post([FromBody] Product product) // async Task<IActionResult> olmalÄ±
        {
            // Kategori ID'sinin geÃ§erli bir kategoriye ait olup olmadÄ±ÄŸÄ±nÄ± kontrol et
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ AnyAsync asenkron bir metottur.
            if (!await _context.Categories.AnyAsync(c => c.Id == product.CategoryId))
            {
                return BadRequest("GeÃ§ersiz Kategori ID'si.");
            }

            // ğŸ”¹ ÃœrÃ¼nÃ¼ ekleyen kullanÄ±cÄ±yÄ± otomatik ata (JWT claim'den)
            var currentUserId = GetUserIdFromClaims();
            if (currentUserId != null)
            {
                product.SellerId = currentUserId;
            }
            // EÄŸer claim yoksa (Ã¶r. AllowAnonymous ise) frontend SellerId gÃ¶nderebilir;
            // ama gÃ¼venlik iÃ§in claim'le atamak tercih edilir.

            _context.Products.Add(product);
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ SaveChangesAsync asenkron bir metottur.
            await _context.SaveChangesAsync();

            // Yeni eklenen Ã¼rÃ¼nÃ¼, iliÅŸkili kategori bilgisiyle birlikte dÃ¶ndÃ¼r
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ LoadAsync asenkron bir metottur.
            await _context.Entry(product).Reference(p => p.Category).LoadAsync();

            // BaÅŸarÄ±lÄ± ÅŸekilde oluÅŸturulan veriyi geri dÃ¶neriz.
            // 'CreatedAtAction' sayesinde 201 Created yanÄ±tÄ± ile birlikte,
            // yeni Ã¼rÃ¼nÃ¼n URI'sini ve kendisini dÃ¶neriz.
            // Eklenen Ã¼rÃ¼nÃ¼n yanÄ±tÄ±nÄ± da temiz bir anonim tip olarak dÃ¶ndÃ¼r
            var productResponse = new // <-- BURADA ANONÄ°M TÄ°P KULLANIYORUZ
            {
                product.Id,
                product.Name,
                product.Price,
                product.Image,
                product.CategoryId,
                product.SellerId, // ğŸ”¹
                Category = product.Category != null ? new
                {
                    product.Category.Id,
                    product.Category.Name
                } : null
            };

            return CreatedAtAction(nameof(Get), new { id = product.Id }, productResponse);
        }

        // HTTP DELETE isteÄŸiyle belirli bir ID'ye sahip Ã¼rÃ¼nÃ¼ silmek iÃ§in kullanÄ±lÄ±r.
        // Ã–rnek URL: DELETE /api/products/3
        [Authorize(Roles = "Admin,Seller")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id) // async Task<IActionResult> olmalÄ±
        {
            // Ã–nce veritabanÄ±ndaki Ã¼rÃ¼nleri tarayÄ±p, belirtilen ID'ye sahip olanÄ± bulmaya Ã§alÄ±ÅŸÄ±rÄ±z.
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ FindAsync asenkron bir metottur.
            var product = await _context.Products.FindAsync(id);

            // EÄŸer Ã¼rÃ¼n bulunamazsa, kullanÄ±cÄ±ya 404 Not Found hatasÄ± dÃ¶ner
            if (product == null)
            {
                return NotFound($"ID'si {id} olan Ã¼rÃ¼n bulunmadÄ±.");
            }

            // ÃœrÃ¼n bulunduysa, EF Core Ã¼zerinden veritabanÄ±ndan silinmek Ã¼zere iÅŸaretler
            _context.Products.Remove(product);

            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ SaveChangesAsync asenkron bir metottur.
            await _context.SaveChangesAsync();

            // 204 No Content â†’ baÅŸarÄ±yla silindi, ama gÃ¶vde dÃ¶nmeye gerek yok
            return NoContent();
        }

        // HTTP PUT isteÄŸiyle mevcut bir Ã¼rÃ¼nÃ¼n bilgilerini gÃ¼ncellemek iÃ§in kullan
        // Ã–rnek: PUT /api/products/2
        // GÃ¶vde (body): { "name": "Yeni ÃœrÃ¼n AdÄ±", "price": 1234.56 }
        [Authorize(Roles = "Admin,Seller")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Put(int id, [FromBody] Product updatedProduct) // async Task<IActionResult> olmalÄ±
        {
            //[FromBody] bir HTTP isteÄŸinin gÃ¶vdesindeki veriyi C# nesnelerinize otomatik olarak dÃ¶nÃ¼ÅŸtÃ¼rmek iÃ§in kullanÄ±lan
            // Ã–nce veritabanÄ±nda bu ID'ye sahip bir Ã¼rÃ¼n olup olmadÄ±ÄŸÄ±nÄ± kontrol eder
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ FindAsync asenkron bir metottur.
            var existingProduct = await _context.Products.FindAsync(id);

            if (existingProduct == null)
            {
                return NotFound($"ID'si {id} olan Ã¼rÃ¼n bulunamadÄ±.");
            }

            // Kategori ID'sinin geÃ§erli bir kategoriye ait olup olmadÄ±ÄŸÄ±nÄ± kontrol et
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ AnyAsync asenkron bir metottur.
            if (!await _context.Categories.AnyAsync(c => c.Id == updatedProduct.CategoryId))
            {
                return BadRequest("GeÃ§ersiz Kategori ID'si.");
            }

            // VeritabanÄ±ndaki Ã¼rÃ¼nÃ¼n Ã¶zelliklerini gelen veriyle gÃ¼ncelle
            existingProduct.Name = updatedProduct.Name;
            existingProduct.Price = updatedProduct.Price;
            existingProduct.Image = updatedProduct.Image;
            existingProduct.CategoryId = updatedProduct.CategoryId; // CategoryId'yi gÃ¼ncelle

            // ğŸ”¹ Ä°stersen burada da gÃ¼venlik iÃ§in sadece sahibi gÃ¼ncelleyebilsin kontrolÃ¼ yapÄ±labilir:
            // var currentUserId = GetUserIdFromClaims();
            // if (User.IsInRole("Seller") && existingProduct.SellerId != currentUserId) return Forbid();

            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ SaveChangesAsync asenkron bir metottur.
            await _context.SaveChangesAsync();

            // GÃ¼ncellenen Ã¼rÃ¼nÃ¼, iliÅŸkili kategori bilgisiyle birlikte dÃ¶ndÃ¼r
            // await kullanmak zorunludur Ã§Ã¼nkÃ¼ LoadAsync asenkron bir metottur.
            await _context.Entry(existingProduct).Reference(p => p.Category).LoadAsync();

            // 200 OK ve gÃ¼ncellenmiÅŸ Ã¼rÃ¼nle birlikte dÃ¶nÃ¼yo
            // GÃ¼ncellenen Ã¼rÃ¼nÃ¼n yanÄ±tÄ±nÄ± da temiz bir anonim tip olarak dÃ¶ndÃ¼r
            var productResponse = new // <-- BURADA ANONÄ°M TÄ°P KULLANIYORUZ
            {
                existingProduct.Id,
                existingProduct.Name,
                existingProduct.Price,
                existingProduct.Image,
                existingProduct.CategoryId,
                existingProduct.SellerId, // ğŸ”¹
                Category = existingProduct.Category != null ? new
                {
                    existingProduct.Category.Id,
                    existingProduct.Category.Name
                } : null
            };

            return Ok(productResponse);
        }

        // ğŸ”¹ KÃ¼Ã§Ã¼k yardÄ±mcÄ±: JWT iÃ§inden user id Ã§ek
        private int? GetUserIdFromClaims()
        {
            // Genelde ClaimTypes.NameIdentifier ya da "sub" kullanÄ±lÄ±r
            var idClaim = User.FindFirst(ClaimTypes.NameIdentifier) ?? User.FindFirst("sub");
            if (idClaim == null) return null;
            return int.TryParse(idClaim.Value, out var id) ? id : null;
        }
        // JWT ile giriÅŸ yapan kullanÄ±cÄ±nÄ±n kimliÄŸi (User nesnesindeki claimâ€™ler) backendâ€™de mevcut.

        // Bu yardÄ±mcÄ± metot, o claimâ€™lerden user idâ€™yi alÄ±p SellerId alanÄ±na yazar.

        // BÃ¶ylece kullanÄ±cÄ± kendi kimliÄŸini deÄŸiÅŸtiremez, gÃ¼venli olur.

        // Ama daha basit ve gÃ¼venliÄŸi ikinci plana atan bir yÃ¶ntem istersen:

        // POST /api/productsâ€™ta frontendâ€™ten SellerId alanÄ±nÄ± da JSON ile gÃ¶nderebilirsin.

        // O zaman bu yardÄ±mcÄ± metoda gerek kalmaz, sadece product.SellerId = gelenVeri yaparsÄ±n.

        // Fakat bu durumda herhangi biri APIâ€™ye baÅŸka bir SellerId gÃ¶nderip o kiÅŸi adÄ±na Ã¼rÃ¼n ekleyebilir.
    }
}
